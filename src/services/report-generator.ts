import jsPDF from "jspdf";
import html2canvas from "html2canvas";

export interface ReportData {
  productName: string;
  productCategory: string;
  userEmail: string;
  formResponses: Record<string, any>;
  questions: Record<string, any[]>;
  generatedAt: Date;
}

export interface QuestionData {
  id: string;
  question: string;
  type: string;
  required: boolean;
  options?: string[];
}

/**
 * Generate a professional PDF transparency report
 */
export const generateTransparencyReport = async (
  data: ReportData
): Promise<Blob> => {
  const doc = new jsPDF("p", "mm", "a4");
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  const contentWidth = pageWidth - margin * 2;

  let yPosition = margin;
  const lineHeight = 7;
  const sectionSpacing = 15;

  // Helper function to add text with word wrapping
  const addWrappedText = (
    text: string,
    x: number,
    y: number,
    maxWidth: number
  ) => {
    const lines = doc.splitTextToSize(text, maxWidth);
    doc.text(lines, x, y);
    return lines.length * lineHeight;
  };

  // Helper function to add a section header
  const addSectionHeader = (title: string, y: number) => {
    doc.setFontSize(16);
    doc.setFont(undefined, "bold");
    doc.setTextColor(44, 62, 80);
    doc.text(title, margin, y);
    return y + lineHeight + 5;
  };

  // Helper function to add a subsection
  const addSubsection = (title: string, y: number) => {
    doc.setFontSize(12);
    doc.setFont(undefined, "bold");
    doc.setTextColor(52, 73, 94);
    doc.text(title, margin + 5, y);
    return y + lineHeight + 3;
  };

  // Helper function to add regular text
  const addText = (text: string, y: number, indent: number = 0) => {
    doc.setFontSize(10);
    doc.setFont(undefined, "normal");
    doc.setTextColor(44, 62, 80);
    const x = margin + indent;
    const height = addWrappedText(text, x, y, contentWidth - indent);
    return y + height + 2;
  };

  // Helper function to add a question and answer
  const addQuestionAnswer = (question: string, answer: any, y: number) => {
    // Question
    doc.setFontSize(10);
    doc.setFont(undefined, "bold");
    doc.setTextColor(52, 73, 94);
    const questionHeight = addWrappedText(
      `Q: ${question}`,
      margin + 5,
      y,
      contentWidth - 10
    );

    // Answer
    doc.setFont(undefined, "normal");
    doc.setTextColor(44, 62, 80);
    let answerText = "";
    if (Array.isArray(answer)) {
      answerText = answer.join(", ");
    } else if (typeof answer === "boolean") {
      answerText = answer ? "Yes" : "No";
    } else {
      answerText = String(answer || "Not provided");
    }

    const answerHeight = addWrappedText(
      `A: ${answerText}`,
      margin + 10,
      y + questionHeight + 2,
      contentWidth - 15
    );

    return y + questionHeight + answerHeight + 5;
  };

  // Page 1: Title and Executive Summary
  doc.setFillColor(52, 152, 219);
  doc.rect(0, 0, pageWidth, 40, "F");

  // Title
  doc.setFontSize(24);
  doc.setFont(undefined, "bold");
  doc.setTextColor(255, 255, 255);
  doc.text("Product Transparency Report", pageWidth / 2, 25, {
    align: "center",
  });

  yPosition = 60;

  // Product Information
  yPosition = addSectionHeader("Product Information", yPosition);
  yPosition = addText(`Product Name: ${data.productName}`, yPosition);
  yPosition = addText(`Category: ${data.productCategory}`, yPosition);
  yPosition = addText(
    `Report Generated: ${data.generatedAt.toLocaleDateString()}`,
    yPosition
  );
  yPosition = addText(`Generated By: ${data.userEmail}`, yPosition);

  yPosition += sectionSpacing;

  // Executive Summary
  yPosition = addSectionHeader("Executive Summary", yPosition);
  yPosition = addText(
    "This transparency report provides comprehensive information about the manufacturing, testing, and environmental impact of the product. The data has been collected through a structured questionnaire designed to assess transparency across key areas of product development and lifecycle.",
    yPosition
  );

  // Check if we need a new page
  if (yPosition > pageHeight - 100) {
    doc.addPage();
    yPosition = margin;
  }

  // Manufacturing & Sourcing Section
  yPosition = addSectionHeader("Manufacturing & Sourcing", yPosition);

  if (data.questions.manufacturing) {
    data.questions.manufacturing.forEach((question: QuestionData) => {
      const answer = data.formResponses[question.id];
      yPosition = addQuestionAnswer(question.question, answer, yPosition);

      // Check if we need a new page
      if (yPosition > pageHeight - 50) {
        doc.addPage();
        yPosition = margin;
      }
    });
  }

  yPosition += sectionSpacing;

  // Testing & Certifications Section
  yPosition = addSectionHeader("Testing & Certifications", yPosition);

  if (data.questions.testing) {
    data.questions.testing.forEach((question: QuestionData) => {
      const answer = data.formResponses[question.id];
      yPosition = addQuestionAnswer(question.question, answer, yPosition);

      // Check if we need a new page
      if (yPosition > pageHeight - 50) {
        doc.addPage();
        yPosition = margin;
      }
    });
  }

  yPosition += sectionSpacing;

  // Environmental Impact Section
  yPosition = addSectionHeader("Environmental Impact", yPosition);

  if (data.questions.environmental) {
    data.questions.environmental.forEach((question: QuestionData) => {
      const answer = data.formResponses[question.id];
      yPosition = addQuestionAnswer(question.question, answer, yPosition);

      // Check if we need a new page
      if (yPosition > pageHeight - 50) {
        doc.addPage();
        yPosition = margin;
      }
    });
  }

  // Add footer to last page
  const currentPage = doc.getCurrentPageInfo().pageNumber;
  doc.setPage(currentPage);

  doc.setFontSize(8);
  doc.setFont(undefined, "normal");
  doc.setTextColor(128, 128, 128);
  doc.text(
    `Generated by Clear Insight Lab - Page ${currentPage}`,
    pageWidth / 2,
    pageHeight - 10,
    { align: "center" }
  );

  // Convert to blob
  const pdfBlob = doc.output("blob");
  return pdfBlob;
};

/**
 * Generate report and trigger download
 */
export const generateAndDownloadReport = async (
  data: ReportData
): Promise<void> => {
  try {
    const blob = await generateTransparencyReport(data);

    // Create download link
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `${data.productName.replace(
      /[^a-zA-Z0-9]/g,
      "_"
    )}_Transparency_Report_${new Date().toISOString().split("T")[0]}.pdf`;

    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Clean up
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error("Error generating report:", error);
    throw new Error("Failed to generate report");
  }
};

/**
 * Generate report and return as base64 string (for preview)
 */
export const generateReportAsBase64 = async (
  data: ReportData
): Promise<string> => {
  try {
    const blob = await generateTransparencyReport(data);

    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    console.error("Error generating report:", error);
    throw new Error("Failed to generate report");
  }
};
